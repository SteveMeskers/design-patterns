# DESCRIPTION
Enables the exact behavior of the system to be selected at run-time

# USE CASE
Many algorithms can be decomposed into higher and lower level parts
Making tea can be decomposed into
    - The process of making hot beverage (boil water, pour into cup)
    - Tea-specific things (put teabag in water)
The high-level algorithm can then be reused for making coffe or hot chocolate
    - Supported by beverage-specific strategies

## EXERCISE
Consider the quadratic equation and its canonical solution:
ax^2 + bx + c = 0
x = -b +/- sqrt(b^2 - 4*a*c)/ 2*a
The part b^2-4*a*c is called the discriminant. Suppose we want to provide an API with two different strategies for calculating the discriminant:

In OrdinaryDiscriminantStrategy , If the discriminant is negative, we return it as-is. This is OK, since our main API returns Complex  numbers anyway.

In RealDiscriminantStrategy , if the discriminant is negative, the return value is NaN (not a number). NaN propagates throughout the calculation, so the equation solver gives two NaN values. In Python, you make such a number with float('nan').

Please implement both of these strategies as well as the equation solver itself. With regards to plus-minus in the formula, please return the + result as the first element and - as the second. Note that the solve() method is expected to return complex values.
